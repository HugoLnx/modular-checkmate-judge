#if ! defined( TABULEIRO_ )
#define TABULEIRO_
/***************************************************************************
*
*  $MCD Módulo de definição: Módulo matriz
*
*  Arquivo gerado:              TABULEIRO.H
*  Letras identificadoras:      TAB
*
*  Autores: hg - Hugo Roque
*           nf - Nino Fabrizio
*
*  $HA Histórico de evolução:
*     Versão  Autor     Data     Observações
*       1.00   hg e nf  15/09/2013 Adaptação do módulo para manipular matrizes
*
*  $ED Descrição do módulo
*     Este módulo implementa um conjunto simples de funções para criar e
*     explorar matrizes.
*     A matriz possui uma cabeça que contém uma referência para a raíz da
*     matriz e outra para um nó corrente da matriz.
*     O modulo permite a manipulação de múltiplas matrizes, porém as funções
*     só manipulam uma matriz de cada vez.
*     Ao iniciar a execução do programa não existe matriz.
*     A matriz poderá estar vazia. Neste caso a origem e o nó corrente
*     serão nulos, embora a cabeça esteja definida.
*     O nó corrente será nulo se e somente se a matriz estiver vazia.
*
***************************************************************************/
 
#if defined( TABULEIRO_OWN )
   #define TABULEIRO_EXT
#else
   #define TABULEIRO_EXT extern
#endif

#define LARGURA        8
#define ALTURA         8
#define TOTAL_DIRECOES 8

#include "lista.h"

typedef struct stMatriz TAB_tpMatriz;

typedef enum {
   ANDA = 0,
   VOA = 1
} TAB_tpTipoMovimento;


typedef enum {
   ALIADA = 0,
   INIMIGA = 1
} TAB_tpTimePeca;

typedef enum {
   NORTE    = 0,

   NORDESTE = 1,

   ESTE     = 2,

   SUDESTE  = 3,  

   SUL      = 4,
   
   SUDOESTE = 5,

   OESTE    = 6,

   NOROESTE = 7
} TAB_tpDirecao;

typedef struct TAB_stPasso
{
   TAB_tpDirecao direcao;
   int quantidade;
} TAB_tpPasso;

/***********************************************************************
*
*  $TC Tipo de dados: TAB Condicoes de retorno
*
*
***********************************************************************/

   typedef enum {

         TAB_CondRetOK = 0 ,
               /* Executou correto */

         TAB_CondRetNaoCriouOrigem = 1 ,
               /* Não criou nó origem */

         TAB_CondRetNaoEhNo = 2 ,
               /* Não é nó na direção desejada */

         TAB_CondRetMatrizNaoExiste = 3 ,
               /* Matriz não existe */

         TAB_CondRetNaoTemCorrente = 4 ,
               /* Matriz está vazia */

         TAB_CondRetFaltouMemoria = 5 ,
               /* Faltou memória ao alocar dados */
         TAB_CondRetPecaNaoEncontrada = 6

   } TAB_tpCondRet ;


   TAB_tpCondRet TAB_CriarTabuleiro(TAB_tpMatriz **ppMatriz);

   TAB_tpCondRet TAB_AlgumaPegadaInimiga(TAB_tpMatriz *pTabuleiro, int *pResposta);

   TAB_tpCondRet TAB_InserirRei(TAB_tpMatriz *pTabuleiro);
   
   TAB_tpCondRet TAB_RemoverRei(TAB_tpMatriz *pTabuleiro);

   TAB_tpCondRet TAB_IrCasaRei(TAB_tpMatriz *pTabuleiro);
   
   TAB_tpCondRet TAB_EhCheckmate(TAB_tpMatriz *pTabuleiro, int *pResposta);

   TAB_tpCondRet TAB_CriarPegadas(TAB_tpMatriz *pTabuleiro);

/***********************************************************************
*
*  $FC Função: TAB Destruir matriz
*
*  $ED Descrição da função
*     Destrói o corpo e a cabeça da matriz, anulando a matriz corrente.
*     Faz nada caso a matriz corrente não exista.
*
*  $EP Parâmetros
*     $P ppMatriz - é o ponteiro para a matriz que será destruida.
*                    Este parâmetro é passado por referência.
*
*  $FV Valor retornado
*     TAB_CondRetOK
*     TAB_CondRetMatrizNaoExiste
*
***********************************************************************/
   TAB_tpCondRet TAB_DestruirMatriz( TAB_tpMatriz ** ppMatriz ) ;


   TAB_tpCondRet TAB_IrCasa(TAB_tpMatriz *pTabuleiro, char *nomeCasa);

   TAB_tpCondRet TAB_CriarPeca(TAB_tpMatriz *pTabuleiro, char *nome,
      LIS_tppLista pPassos, TAB_tpTipoMovimento tipoMovimento);

   TAB_tpCondRet TAB_AlterarPeca(TAB_tpMatriz *pTabuleiro, char *nomeAtual, char* nomeNovo,
      LIS_tppLista pNovosPassos, TAB_tpTipoMovimento novoTipoMovimento);

   TAB_tpCondRet TAB_InserirPeca(TAB_tpMatriz *pTabuleiro, char *nome, TAB_tpTimePeca time);

   TAB_tpCondRet TAB_CopiarTabuleiro(TAB_tpMatriz *pTabuleiro, TAB_tpMatriz **ppCopia);

   TAB_tpCondRet TAB_RemoverPeca(TAB_tpMatriz *pTabuleiro);

/***************************************************************************
*
*  $FC Função: MAT Ir para nó genérico.
*  
*  $ED Descrição da função
*  Muda o nó corrente da matriz para o nó na direção apontada
*  
*  $EP Parâmetros
*     pMatriz - ponteiro para matriz que manipulada.
*     direcao - representa a direção que o nó corrente navegará.
*
*  $FV Valor retornado
*     TAB_CondRetOK
*     TAB_CondRetMatrizNaoExiste
*     TAB_CondRetNaoTemCorrente
*     TAB_CondRetNaoEhNo
*
*  ****/
   TAB_tpCondRet TAB_IrPara(TAB_tpMatriz *pTabuleiro, TAB_tpDirecao);



#undef TABULEIRO_EXT

/********** Fim do módulo de definição: Módulo matriz **********/

#else
#endif
